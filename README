What this program does
======================
This project have two parts, life and life_gui
It is a celluar automata and have both TUI and GUI interface. 

life
=======
This program takes a grid description file from stdin or filename from
command line argument, it then simulates the grid based on
corresponding rules. 

Usage:
======
$ ./life -h

Notes:
======
* You could specify -f and -v switches and the same time, however, the
  one that occered last will be used. 
* All range values must have form "low..high" where low <= high. 
* If you specify same switches multipul times, only the last one will be used. 
* If you do not specify a filename, stdin will be used as input file

life_gui
=======
This program takes a grid description file from stdin or filename from
command line argument, it then simulates the life process based on
cooresponding rules. Results are displayed using graphic interface. 

Usage:
======
$ ./life_gui -h

Notes:
======
* All range values must have form "low..high" where low <= high. 
* If you specify same switches multipul times, only the last one will be used. 
* If you do not specify a filename, stdin will be used as input file

How did I broke files
=====================
config.h         - Global configurations
ControlDialog.cc - Custom window for the play control of life_gui
ControlDialog.h  - Header file for ControlDialog.cc
miner_parser.l   - Lexical recognizer definition for Dr. Miner's file format
miner_parser.y   - Grammer description file for Dr. Mider's file format
miner_parser.h   - Header file for miner_paser.y file
miner_type.cc    - Fancy class to represent any type of data that are defined in
                   Dr. Miner's file format
miner_type.h     - Header file for miner_type.cc
Simulators.cc    - Simulator classes for all supported simulations
Simulators.h     - Header file for Simulators.cc
LifeGrid.cc      - Custom widget for Qt to display simulated cell in life_gui
LifeGrid.h       - Header file for LifeGrid.cc
life.cc          - main function for life
life_gui.cc      - main function for life_gui
utils.c          - Utility functions
utils.h          - Utility macros
Makefile         - The Makefile for the whole project

make will first compile miner_parser.l and miner_parser.y into C file. Then compile
Qt headers into moc file. Then compile each object file and link them together. 
Makefile knows how to compile and link life_gui so no qmake is needed. 

Techniques
==========

* Full functional and reusable parser written with flex and bison, can parse 
  any file that is written in Dr. Miner's format, can parse big files very fast
* Used C++ class to define abstract simulator and derive different rules from this
  class, minimized redundancy. 
* Used vector<unsigned char> to store cell status for minimized memory consumption
* Use as many built in functions as possible. Does not re-invent wheels

Whole Project
=============
* All code are valgrind warning-free (with --leak-check=full). 
  - Except life_gui since Qt is leaking memory at places I don't have control. 
* Used C++11 features around the project, did not use Boost for simplicity. 
* Developed with Vim, GCC, GNU Make, gdb, git and tmux on Pyrite.
  You could `git log` to see my progress from beginning if you want. 

